<?php
 namespace Optimization\Buffer; use Boilerplate\Logger; abstract class Buffer { protected ?string $id; protected Test $test; public function __construct(Test $test) { $this->test = $test; } public function getId() : ?string { return $this->id; } public function getTest() : Test { return $this->test; } protected function logLastTestError($class = null, $method = null) { $error = $this->getTest()->getLastError($class, $method); $this->log($error["\x6d\145\x73\x73\141\147\145"], $error["\144\x61\164\x61"]); } protected function log($message, $context = [], $type = 100) { goto if44i; P2PMX: Logger::addLog($message, $context, $type); goto pW0cL; pW0cL: xfIUK: goto COve_; if44i: if (!class_exists("\102\x6f\151\154\145\162\x70\154\141\164\x65\x5c\104\145\x76\x65\x6c\157\x70\x6d\145\x6e\164\134\114\x6f\x67\x67\145\162")) { goto xfIUK; } goto P2PMX; COve_: } protected function isHtml(string $buffer) { return preg_match("\57\x3c\134\57\x68\164\x6d\x6c\76\57\151", $buffer); } public abstract function maybeInitProcess(); public abstract function maybeProcessBuffer(string $buffer); }
