<?php
 namespace Optimization\Data; use Boilerplate\Util\ArrayUtil; use Boilerplate\Util\ThemeUtil; class Source { const JS = "\152\x73"; const CSS = "\x63\163\x73"; protected ?array $extra = []; protected ?string $url = null; protected ?string $type = null; protected ?string $path = null; protected ?string $handle = null; protected bool $combined = false; protected ?array $dependencies = []; public function isCombined() : bool { return $this->combined; } public function setCombined(bool $H4FTE) : self { $this->combined = $H4FTE; return $this; } public function getUrl() : ?string { return $this->url; } public function setUrl(?string $hgTz4) : self { $this->url = $hgTz4; return $this; } public function getType() : ?string { return $this->type; } public function setType(?string $jDNPs) : self { $this->type = $jDNPs; return $this; } public function getPath() : ?string { return $this->path; } public function setPath(?string $GuTuU) : self { $this->path = $GuTuU; return $this; } public function getHandle() : ?string { return $this->handle; } public function setHandle(?string $XRjFb) : self { $this->handle = $XRjFb; return $this; } public function isJs() : bool { return self::JS == $this->getType(); } public function getDependencies() : ?array { return $this->dependencies; } public function addDependency($vdWr3) : self { $this->dependencies[] = $vdWr3; return $this; } public function getExtra() : ?array { return $this->extra; } public function addExtra($nzF0q, $b8HPW) { $this->extra[$nzF0q] = $b8HPW; } public function hasExtra($nzF0q) { return ArrayUtil::get($this->getExtra(), $nzF0q); } public function addExtras($eeP39) { goto OMBir; Tukdf: S37Cb: goto Jj3qi; Jj3qi: return $this; goto Q3wcE; OMBir: foreach ($eeP39 as $nzF0q => $wzJxq) { $this->addExtra($nzF0q, $wzJxq); UuTWX: } goto Tukdf; Q3wcE: } }
