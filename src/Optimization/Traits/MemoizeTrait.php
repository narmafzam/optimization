<?php
 namespace Optimization\Traits; trait MemoizeTrait { protected ?array $memoized = []; public function getMemoized() : ?array { return $this->memoized; } private final function getMemoizeArgsHash(array $args) { goto Ppke4; cyd4u: x6gHc: goto dL2Pu; dL2Pu: return $hash; goto fSuPs; Ryjc9: if (!([] !== $args)) { goto x6gHc; } goto kbkVG; kbkVG: md5(call_user_func("\152\x73\x6f\x6e\137\145\x6e\x63\x6f\x64\145", $args)); goto cyd4u; Ppke4: $hash = "\144\67\65\61\67\x31\x33\x39\70\x38\x39\x38\67\x65\x39\x33\63\x31\71\70\60\63\x36\x33\x65\x32\64\61\x38\x39\x63\x65"; goto Ryjc9; fSuPs: } public final function isMemoized(string $method, $args = []) { $hash = $this->getMemoizeArgsHash($args); return isset($this->getMemoized()[$method][$hash]); } public final function getMemoizedBy(string $method, $args = []) { goto fYAsd; wQKRw: $memoized = $this->memoized; goto IafhZ; IafhZ: return isset($memoized[$method][$hash]) ? $memoized[$method][$hash] : null; goto x57uE; fYAsd: $hash = $this->getMemoizeArgsHash($args); goto wQKRw; x57uE: } public final function memoize(string $method, array $args = [], $value = null) { goto pSlyJ; q3bY8: $memoized[$method] = []; goto qc0Ii; qc0Ii: A5e8q: goto RkyrA; RkyrA: $this->memoized[$method][$hash] = $value; goto s29bR; pSlyJ: $hash = $this->getMemoizeArgsHash($args); goto ghARp; s29bR: return $this->getMemoized()[$method][$hash]; goto AWcS4; ghARp: if (isset($this->getMemoized()[$method])) { goto A5e8q; } goto q3bY8; AWcS4: } }
